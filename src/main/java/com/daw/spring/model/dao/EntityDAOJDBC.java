package com.daw.spring.model.dao;

import com.daw.spring.model.Entity;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository("entityDAOJdbc")
public class EntityDAOJDBC implements EntityDAO {

    private static final String dbTable = "Entity";
    private static final String[] autoField = {"id"}; //Autogenerated field for new records
    private static final String SQL_SEARCHBYID = "SELECT * FROM Entity where id=?";
    private static final String SQL_FINDALL = "SELECT * FROM Entity";

    private final Logger logger = Logger.getLogger(EntityDAOJDBC.class.getName());

    @Autowired(required = false)
    private DataSource ds;

    public EntityDAOJDBC() {
    }


    /**
     * Retrieve an Entity from current row in RS (MAPPING)
     */
    private static Entity entityMapper(ResultSet rs) throws SQLException {
        Entity c;
        c = new Entity( rs.getInt("id"),
                        rs.getString("name")
        );
        return c;
    }

    @Override
    public Entity findById(Integer id) {
        Entity c = null;
        try (Connection conn = ds.getConnection();
                PreparedStatement stmn = conn.prepareStatement(SQL_SEARCHBYID)) {
            stmn.setInt(1, id);
            try (ResultSet rs = stmn.executeQuery()) {
                if (rs.next()) {
                    c = entityMapper(rs);
                }
            }
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return c;
    }

    @Override
    public List<Entity> findAll() {
        List<Entity> l = new ArrayList<>();
        try (Connection conn = ds.getConnection();
                Statement stmn = conn.createStatement();
                ResultSet rs = stmn.executeQuery(SQL_FINDALL);) {
            while (rs.next()) {
                l.add(entityMapper(rs));
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;
    }

    @Override
    public boolean create (Entity e) {
        boolean result = false;
        //TODO
        return result;
    }

    @Override
    public boolean update(Entity c) {
        boolean result = false;
        //TODO
        return result;
    }

    @Override
    public boolean delete(Integer id) {
        boolean result = false;
        //TODO
        return result;
    }
}
